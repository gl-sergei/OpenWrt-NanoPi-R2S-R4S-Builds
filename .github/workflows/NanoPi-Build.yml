#=================================================
# Description: Build OpenWrt using GitHub Actions
# Lisence: MIT

name: NanoPi Build

on:
#  release:
#    types: published
  #push:
  #  branches:
  #    - 21.02
  #  paths:
  #    - '.github/workflows/openwrt-rockchip-2102.yml'
  #    - 'step/00-prepare_openwrt.sh'
  #    - 'step/01-prepare_package.sh'
  #    - 'seed/rockchip.seed'
  #schedule:
  #  - cron: 30 21 * * *
  #watch:
  #  types: started
  workflow_dispatch:
    inputs:
      openwrt_branch:
        description: 'OpenWrt Branch to build'     
        required: true
        default: '21.02'
        type: choice
        options:
        - '21.02'
      nanopi_model:
        description: 'NanoPi Model'     
        required: true
        default: 'R2S'
        type: choice
        options:
        - R2S
        - R4S
      release_id:
        description: 'Release Id Suffix : 20220101.suffix'
        required: true
        default: '1'
        type: string
        
jobs:
  toolchain:
    runs-on: ubuntu-20.04
    if: github.event.repository.owner.id == github.event.sender.id

    steps:
    - name: Checkout repository
      uses: actions/checkout@main
    
    - name: Setup Linux Requirements
      uses: ./.github/actions/setup-devenv

    - name: Set GITHUB_ENV
      run: |
        echo "SSH_ACTIONS=false" >> $GITHUB_ENV
        echo "UPLOAD_BIN_DIR=false" >> $GITHUB_ENV
        echo "UPLOAD_FIRMWARE=true" >> $GITHUB_ENV
        echo "UPLOAD_RELEASE=true" >> $GITHUB_ENV
        echo "TZ=Europe/Paris" >>$GITHUB_ENV
        echo "Build_Date=$(date +%Y.%m.%d)" >> $GITHUB_ENV
        echo "RELTAG=v$(date +'%Y%m%d').${{ github.event.inputs.release_id }}" >> $GITHUB_ENV
        echo "OPENWRT_BRANCH=${{ github.event.inputs.openwrt_branch }}" >> $GITHUB_ENV
        echo "NANOPI_MODEL=${{ github.event.inputs.nanopi_model }}" >> $GITHUB_ENV

    - name: Show GITHUB_ENV
      run: echo $GITHUB_ENV

    - name: Clone OpenWrt source
      run: /bin/bash ./steps/$OPENWRT_BRANCH/01_clone_openwrt.sh
    
    - name: Make working copy of OpenWrt source
      run: /bin/bash ./steps/$OPENWRT_BRANCH/02_prepare_openwrt_folder.sh
    
    - name: Patch OpenWrt Source
      run: /bin/bash ./steps/$OPENWRT_BRANCH/$NANOPI_MODEL/03_patch_openwrt.sh
    
    - name: Prepare package
      run: /bin/bash ./steps/04-prepare_package.sh
    
    - name: Add ACL
      run: |
        /bin/bash ./steps/05-create_luci_acl.sh
    - name: Load toolchain seed
      run: |
        /bin/bash ./steps/06-create_config_from_toolchain_seed.sh
        
    - name: Download package
      id: package
      run: |
        cd build/openwrt
        make defconfig
        make download -j10
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Make toolchain-aarch64
      id: compiletoolchain
      continue-on-error: true
      run: |
        cd build/openwrt
        let make_process=$(nproc)+2
        make toolchain/install -j${make_process}
    
    - name: If toolchain Error
      if: steps.compiletoolchain.outcome == 'failure'
      run: |
        echo '================================================================'
        cd build/openwrt && make toolchain/install -j1 V=s
    
    - name: Try cleaning build_dir properly before packing
      run: |
        cd build/openwrt
        make clean
        rm -rf build_dir/*

    - name: Pack toolchain
      run: |
        pwd
        cd ..
        pwd
        tar --posix -Jcvf toolchain_built.tar.xz OpenWrt-NanoPi-R2S-R4S-Builds

    - name: Upload artifact
      uses: actions/upload-artifact@v2
      with:
        name: toolchain_built
        path: ~/work/OpenWrt-NanoPi-R2S-R4S-Builds/toolchain_built.tar.xz
  
  build:
    needs: toolchain
    runs-on: ubuntu-20.04
    steps:
    - name: Dump github context
      run: echo "$GITHUB_CONTEXT"
      shell: bash
      env:
        GITHUB_CONTEXT: ${{ toJson(github) }}

    - name: Retrieve toolchain artifact
      uses: actions/download-artifact@v2
      with:
        name: toolchain_built
        path: ~/work/OpenWrt-NanoPi-R2S-R4S-Builds/
    
    - name: Unpack and clean toolchain artifact
      run: |
        tar Jxvf toolchain_built.tar.xz
        rm toolchain_built.tar.xz
      working-directory: ..

    - name: Prepare Build deps
      uses: ./.github/actions/setup-devenv
    
    - name: Set env
      run: |
        echo "SSH_ACTIONS=false" >> $GITHUB_ENV
        echo "UPLOAD_BIN_DIR=false" >> $GITHUB_ENV
        echo "UPLOAD_FIRMWARE=true" >> $GITHUB_ENV
        echo "UPLOAD_RELEASE=true" >> $GITHUB_ENV
        echo "TZ=Europe/Paris" >>$GITHUB_ENV
        echo "Build_Date=$(date +%Y.%m.%d)" >> $GITHUB_ENV
        echo "RELTAG=v$(date +'%Y%m%d').${{ github.event.inputs.release_id }}" >> $GITHUB_ENV
        echo "OPENWRT_BRANCH=${{ github.event.inputs.openwrt_branch }}" >> $GITHUB_ENV
        echo "NANOPI_MODEL=${{ github.event.inputs.nanopi_model }}" >> $GITHUB_ENV
    
    - name: Load ao mini Config
      run: |
        /bin/bash ./steps/06-create_config_from_mini_seed.sh
        
    - name: Compile OpenWRT for R2S & R4S mini
      id: compileopenwrtmini
      continue-on-error: true
      run: |
        cd build/openwrt
        let make_process=$(nproc)+1
        make -j${make_process} || make -j${make_process}
    - name: If compile openwrt Error
      if: steps.compileopenwrtmini.outcome == 'failure'
      run: |
        cat build/openwrt/.config
        echo '================================================================'
        cd build/openwrt && make -j1 V=s
    - name: Set env
      run: |
        echo "TZ=Europe/Paris" >>$GITHUB_ENV
        echo "Build_Date=$(date +%Y-%m-%d %H:%M)" >> $GITHUB_ENV
        echo "RELTAG=v$(date +'%Y%m%d').${{ github.event.inputs.release_id }}" >> $GITHUB_ENV
    
    - name: Organize files mini
      id: organizemini
      run: |
        rm -rf ./artifact/
        mkdir -p ./artifact/
        mv build/openwrt/bin/targets/rockchip/armv8/*sysupgrade.img* ./artifact/
        cd ./artifact/
        ls -Ahl
        mv openwrt-rockchip-armv8-friendlyarm_nanopi-r2s-ext4-sysupgrade.img.gz OpenWrt-AO-$OPENWRT_BRANCH-$RELTAG-NanoPi-r2s-ext4-mini.img.gz
        mv openwrt-rockchip-armv8-friendlyarm_nanopi-r2s-squashfs-sysupgrade.img.gz OpenWrt-AO-$OPENWRT_BRANCH-$RELTAG-NanoPi-r2s-squashfs-mini.img.gz
        mv openwrt-rockchip-armv8-friendlyarm_nanopi-r4s-ext4-sysupgrade.img.gz OpenWrt-AO-$OPENWRT_BRANCH-$RELTAG-NanoPi-r4s-ext4-mini.img.gz
        mv openwrt-rockchip-armv8-friendlyarm_nanopi-r4s-squashfs-sysupgrade.img.gz OpenWrt-AO-$OPENWRT_BRANCH-$RELTAG-NanoPi-r4s-squashfs-mini.img.gz
        gzip -d *.gz && exit 0
        gzip --best *.img
        ls -Ahl
        zip OpenWrt-AO-$OPENWRT_BRANCH-$RELTAG-NanoPi-r2s-ext4-mini.zip *r2s*ext4*mini*
        zip OpenWrt-AO-$OPENWRT_BRANCH-$RELTAG-NanoPi-r2s-squashfs-mini.zip *r2s*squashfs*ini*
        zip OpenWrt-AO-$OPENWRT_BRANCH-$RELTAG-NanoPi-r4s-ext4-mini.zip *r4s*ext4*ini*
        zip OpenWrt-AO-$OPENWRT_BRANCH-$RELTAG-NanoPi-r4s-squashfs-mini.zip *r4s*squashfs* ini*
        cp ../build/openwrt/*.config ./
        ls -Ahl
    - name: Load ao full Config
      run: |
        /bin/bash ./steps/06-create_config_from_seed.sh

    - name: Compile OpenWRT for R2S & R4S full
      id: compileopenwrtfull
      continue-on-error: true
      run: |
        cd build/openwrt
        let make_process=$(nproc)+1
        make -j${make_process} || make -j${make_process}
    - name: If compile openwrt Error
      if: steps.compileopenwrtfull.outcome == 'failure'
      run: |
        cat build/openwrt/.config
        echo '================================================================'
        cd build/openwrt && make -j1 V=s
    - name: Organize files full
      id: organizefull
      run: |
        mv build/openwrt/bin/targets/rockchip/armv8/*sysupgrade.img* ./artifact/
        cd ./artifact/
        ls -Ahl
        mv openwrt-rockchip-armv8-friendlyarm_nanopi-r2s-ext4-sysupgrade.img.gz OpenWrt-AO-$OPENWRT_BRANCH-$RELTAG-NanoPi-r2s-ext4-full.img.gz
        mv openwrt-rockchip-armv8-friendlyarm_nanopi-r2s-squashfs-sysupgrade.img.gz OpenWrt-AO-$OPENWRT_BRANCH-$RELTAG-NanoPi-r2s-squashfs-full.img.gz
        mv openwrt-rockchip-armv8-friendlyarm_nanopi-r4s-ext4-sysupgrade.img.gz OpenWrt-AO-$OPENWRT_BRANCH-$RELTAG-NanoPi-r4s-ext4-full.img.gz
        mv openwrt-rockchip-armv8-friendlyarm_nanopi-r4s-squashfs-sysupgrade.img.gz OpenWrt-AO-$OPENWRT_BRANCH-$RELTAG-NanoPi-r4s-squashfs-full.img.gz
        gzip -d *.gz && exit 0
        gzip --best *.img
        ls -Ahl
        zip OpenWrt-AO-$OPENWRT_BRANCH-$RELTAG-NanoPi-r2s-ext4-full.zip *r2s*ext4*full*
        zip OpenWrt-AO-$OPENWRT_BRANCH-$RELTAG-NanoPi-r2s-squashfs-full.zip *r2s*squashfs*full*
        zip OpenWrt-AO-$OPENWRT_BRANCH-$RELTAG-NanoPi-r4s-ext4-full.zip *r4s*ext4*full*
        zip OpenWrt-AO-$OPENWRT_BRANCH-$RELTAG-NanoPi-r4s-squashfs-full.zip *r4s*squashfs*full*
        cp ../build/openwrt/*.config ./
        ls -Ahl
    
    - name: Upload artifact
      uses: actions/upload-artifact@main
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      with:
        name: OpenWRT_21.02
        path: ./artifact/

    - name: Create release
      id: create_release
      uses: ncipollo/release-action@v1.8.4
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        name: OpenWrt ${{ env.OPENWRT_BRANCH }} ${{ env.RELTAG }} 
        allowUpdates: true
        tag: r2s-${{ env.OPENWRT_BRANCH }}-${{ env.RELTAG }}
        commit: main
        replacesArtifacts: true
        token: ${{ secrets.GITHUB_TOKEN }}
        bodyFile: "release-info-${{ env.OPENWRT_BRANCH }}.md"
        artifacts: ./artifact/*.zip
